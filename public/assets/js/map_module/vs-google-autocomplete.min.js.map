{"version":3,"sources":["vs-google-autocomplete.js"],"names":[],"mappingsfile":"vs-google-autocomplete.min.js","sourcesContent":["(function (window, document) {\r\n    'use strict';\r\n    angular.module('vsGoogleAutocomplete', []);\r\n\r\n    angular.module('vsGoogleAutocomplete').service('vsGooglePlaceUtility', function() {\r\n        function isGooglePlace(place) {\r\n            if (!place)\r\n                return false;\r\n            return !!place.place_id;\r\n        }\r\n\r\n        function isContainTypes(place, types) {\r\n            var placeTypes,\r\n                placeType,\r\n                type;\r\n            if (!isGooglePlace(place))\r\n                return false;\r\n            placeTypes = place.types;\r\n            for (var i = 0; i < types.length; i++) {\r\n                type = types[i];\r\n                for (var j = 0; j < placeTypes.length; j++) {\r\n                    placeType = placeTypes[j];\r\n                    if (placeType === type) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n\r\n        function getAddrComponent(place, componentTemplate) {\r\n            var result;\r\n            if (!isGooglePlace(place))\r\n                return;\r\n            for (var i = 0; i < place.address_components.length; i++) {\r\n                var addressType = place.address_components[i].types[0];\r\n                if (componentTemplate[addressType]) {\r\n                    result = place.address_components[i][componentTemplate[addressType]];\r\n                    return result;\r\n                }\r\n            }\r\n            return;\r\n        }\r\n\r\n        function getPlaceId(place) {\r\n            if (!isGooglePlace(place))\r\n                return;\r\n            return place.place_id;\r\n        }\r\n\r\n        function getStreetNumber(place) {\r\n            var COMPONENT_TEMPLATE = { street_number: 'short_name' },\r\n                streetNumber = getAddrComponent(place, COMPONENT_TEMPLATE);\r\n            return streetNumber;\r\n        }\r\n\r\n        function getStreet(place) {\r\n            var COMPONENT_TEMPLATE = { route: 'long_name' },\r\n                street = getAddrComponent(place, COMPONENT_TEMPLATE);\r\n            return street;\r\n        }\r\n\r\n        function getCity(place) {\r\n            var COMPONENT_TEMPLATE = { locality: 'long_name' },\r\n                city = getAddrComponent(place, COMPONENT_TEMPLATE);\r\n            return city;\r\n        }\r\n\r\n        function getState(place) {\r\n            var COMPONENT_TEMPLATE = { administrative_area_level_1: 'short_name' },\r\n                state = getAddrComponent(place, COMPONENT_TEMPLATE);\r\n            return state;\r\n        }\r\n\r\n        function getDistrict(place) {\r\n            var COMPONENT_TEMPLATE = { administrative_area_level_2: 'short_name' },\r\n                state = getAddrComponent(place, COMPONENT_TEMPLATE);\r\n            return state;\r\n        }\r\n\r\n        function getCountryShort(place) {\r\n            var COMPONENT_TEMPLATE = { country: 'short_name' },\r\n                countryShort = getAddrComponent(place, COMPONENT_TEMPLATE);\r\n            return countryShort;\r\n        }\r\n\r\n        function getCountry(place) {\r\n            var COMPONENT_TEMPLATE = { country: 'long_name' },\r\n                country = getAddrComponent(place, COMPONENT_TEMPLATE);\r\n            return country;\r\n        }\r\n\r\n        function getPostCode(place) {\r\n            var COMPONENT_TEMPLATE = { postal_code: 'long_name' },\r\n                postCode = getAddrComponent(place, COMPONENT_TEMPLATE);\r\n            return postCode;\r\n        }\r\n\r\n        function isGeometryExist(place) {\r\n            return angular.isObject(place) && angular.isObject(place.geometry);\r\n        }\r\n\r\n        function getLatitude(place) {\r\n            if (!isGeometryExist(place)) return;\r\n            return place.geometry.location.lat();\r\n        }\r\n\r\n        function getLongitude(place) {\r\n            if (!isGeometryExist(place)) return;\r\n            return place.geometry.location.lng();\r\n        }\r\n\r\n        return {\r\n            isGooglePlace: isGooglePlace,\r\n            isContainTypes: isContainTypes,\r\n            getPlaceId: getPlaceId,\r\n            getStreetNumber: getStreetNumber,\r\n            getStreet: getStreet,\r\n            getCity: getCity,\r\n            getState: getState,\r\n            getCountryShort: getCountryShort,\r\n            getCountry: getCountry,\r\n            getLatitude: getLatitude,\r\n            getLongitude: getLongitude,\r\n            getPostCode: getPostCode,\r\n            getDistrict: getDistrict\r\n        };\r\n    });\r\n\r\n    angular.module('vsGoogleAutocomplete').directive('vsGoogleAutocomplete', ['vsGooglePlaceUtility', '$timeout', function(vsGooglePlaceUtility, $timeout) {\r\n        return {\r\n            restrict: 'A',\r\n            require: ['vsGoogleAutocomplete', 'ngModel'],\r\n            scope: {\r\n                vsGoogleAutocomplete: '=',\r\n                vsPlace: '=?',\r\n                vsPlaceId: '=?',\r\n                vsStreetNumber: '=?',\r\n                vsStreet: '=?',\r\n                vsCity: '=?',\r\n                vsState: '=?',\r\n                vsCountryShort: '=?',\r\n                vsCountry: '=?',\r\n                vsPostCode: '=?',\r\n                vsLatitude: '=?',\r\n                vsLongitude: '=?',\r\n                vsDistrict: '=?'\r\n            },\r\n            controller: ['$scope', '$attrs', function($scope, $attrs) {\r\n                this.isolatedScope = $scope;\r\n\r\n                /**\r\n                 * Updates address components associated with scope model.\r\n                 * @param {google.maps.places.PlaceResult} place PlaceResult object\r\n                 */\r\n                this.updatePlaceComponents = function(place) {\r\n                    $scope.vsPlaceId      = !!$attrs.vsPlaceId  && place     ? vsGooglePlaceUtility.getPlaceId(place)      : undefined;\r\n                    $scope.vsStreetNumber = !!$attrs.vsStreetNumber && place ? vsGooglePlaceUtility.getStreetNumber(place) : undefined;\r\n                    $scope.vsStreet       = !!$attrs.vsStreet && place       ? vsGooglePlaceUtility.getStreet(place)       : undefined;\r\n                    $scope.vsCity         = !!$attrs.vsCity && place         ? vsGooglePlaceUtility.getCity(place)         : undefined;\r\n                    $scope.vsPostCode     = !!$attrs.vsPostCode && place     ? vsGooglePlaceUtility.getPostCode(place)     : undefined;\r\n                    $scope.vsState        = !!$attrs.vsState && place        ? vsGooglePlaceUtility.getState(place)        : undefined;\r\n                    $scope.vsCountryShort = !!$attrs.vsCountryShort && place ? vsGooglePlaceUtility.getCountryShort(place) : undefined;\r\n                    $scope.vsCountry      = !!$attrs.vsCountry && place      ? vsGooglePlaceUtility.getCountry(place)      : undefined;\r\n                    $scope.vsLatitude     = !!$attrs.vsLatitude && place     ? vsGooglePlaceUtility.getLatitude(place)     : undefined;\r\n                    $scope.vsLongitude    = !!$attrs.vsLongitude && place    ? vsGooglePlaceUtility.getLongitude(place)    : undefined;\r\n                    $scope.vsDistrict     = !!$attrs.vsDistrict && place     ? vsGooglePlaceUtility.getDistrict(place)     : undefined;\r\n                };\r\n            }],\r\n            link: function(scope, element, attrs, ctrls) {\r\n                // controllers\r\n                var autocompleteCtrl = ctrls[0],\r\n                    modelCtrl = ctrls[1];\r\n\r\n                // google.maps.places.Autocomplete instance (support google.maps.places.AutocompleteOptions)\r\n                var autocompleteOptions = scope.vsGoogleAutocomplete || {},\r\n                    autocomplete = new google.maps.places.Autocomplete(element[0], autocompleteOptions);\r\n\r\n                // google place object\r\n                var place;\r\n\r\n                // value for updating view\r\n                var\tviewValue;\r\n\r\n                // updates view value and address components on place_changed google api event\r\n                google.maps.event.addListener(autocomplete, 'place_changed', function() {\r\n                    place = autocomplete.getPlace();\r\n                    viewValue = place.formatted_address || modelCtrl.$viewValue;\r\n                    scope.$apply(function() {\r\n                        scope.vsPlace = place;\r\n                        autocompleteCtrl.updatePlaceComponents(place);\r\n                        modelCtrl.$setViewValue(viewValue);\r\n                        modelCtrl.$render();\r\n                    });\r\n                });\r\n\r\n                // updates view value on focusout\r\n                element.on('blur', function(event) {\r\n                    viewValue = (place && place.formatted_address) ? viewValue : modelCtrl.$viewValue;\r\n                    $timeout(function() {\r\n                        scope.$apply(function() {\r\n                            modelCtrl.$setViewValue(viewValue);\r\n                            modelCtrl.$render();\r\n                        });\r\n                    });\r\n                });\r\n\r\n                // prevent submitting form on enter\r\n                google.maps.event.addDomListener(element[0], 'keydown', function(e) {\r\n                    if (e.keyCode == 13) {\r\n                        e.preventDefault();\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    }]);\r\n})(window, document);"],"sourceRoot":"/source/"}