{"version":3,"sources":["ng-img-crop.js"],"names":[],"mappingsfile":"ng-img-crop.min.js","sourcesContent":["/*!\n * ngImgCrop v0.2.0\n * https://github.com/alexk111/ngImgCrop\n *\n * Copyright (c) 2014 Alex Kaul\n * License: MIT\n *\n * Generated at Tuesday, July 22nd, 2014, 10:37:39 PM\n */\n(function() {\n'use strict';\n\nvar crop = angular.module('ngImgCrop', []);\n\n'use strict';\r\n\r\ncrop.factory('cropAreaCircle', ['cropArea', function(CropArea) {\r\n  var CropAreaCircle = function() {\r\n    CropArea.apply(this, arguments);\r\n\r\n    this._boxResizeBaseSize = 20;\r\n    this._boxResizeNormalRatio = 0.9;\r\n    this._boxResizeHoverRatio = 1.2;\r\n    this._iconMoveNormalRatio = 0.9;\r\n    this._iconMoveHoverRatio = 1.2;\r\n\r\n    this._boxResizeNormalSize = this._boxResizeBaseSize*this._boxResizeNormalRatio;\r\n    this._boxResizeHoverSize = this._boxResizeBaseSize*this._boxResizeHoverRatio;\r\n\r\n    this._posDragStartX=0;\r\n    this._posDragStartY=0;\r\n    this._posResizeStartX=0;\r\n    this._posResizeStartY=0;\r\n    this._posResizeStartSize=0;\r\n\r\n    this._boxResizeIsHover = false;\r\n    this._areaIsHover = false;\r\n    this._boxResizeIsDragging = false;\r\n    this._areaIsDragging = false;\r\n  };\r\n\r\n  CropAreaCircle.prototype = new CropArea();\r\n\r\n  CropAreaCircle.prototype._calcCirclePerimeterCoords=function(angleDegrees) {\r\n    var hSize=this._size/2;\r\n    var angleRadians=angleDegrees * (Math.PI / 180),\r\n        circlePerimeterX=this._x + hSize * Math.cos(angleRadians),\r\n        circlePerimeterY=this._y + hSize * Math.sin(angleRadians);\r\n    return [circlePerimeterX, circlePerimeterY];\r\n  };\r\n\r\n  CropAreaCircle.prototype._calcResizeIconCenterCoords=function() {\r\n    return this._calcCirclePerimeterCoords(-45);\r\n  };\r\n\r\n  CropAreaCircle.prototype._isCoordWithinArea=function(coord) {\r\n    return Math.sqrt((coord[0]-this._x)*(coord[0]-this._x) + (coord[1]-this._y)*(coord[1]-this._y)) < this._size/2;\r\n  };\r\n  CropAreaCircle.prototype._isCoordWithinBoxResize=function(coord) {\r\n    var resizeIconCenterCoords=this._calcResizeIconCenterCoords();\r\n    var hSize=this._boxResizeHoverSize/2;\r\n    return(coord[0] > resizeIconCenterCoords[0] - hSize && coord[0] < resizeIconCenterCoords[0] + hSize &&\r\n           coord[1] > resizeIconCenterCoords[1] - hSize && coord[1] < resizeIconCenterCoords[1] + hSize);\r\n  };\r\n\r\n  CropAreaCircle.prototype._drawArea=function(ctx,centerCoords,size){\r\n    ctx.arc(centerCoords[0],centerCoords[1],size/2,0,2*Math.PI);\r\n  };\r\n\r\n  CropAreaCircle.prototype.draw=function() {\r\n    CropArea.prototype.draw.apply(this, arguments);\r\n\r\n    // draw move icon\r\n    this._cropCanvas.drawIconMove([this._x,this._y], this._areaIsHover?this._iconMoveHoverRatio:this._iconMoveNormalRatio);\r\n\r\n    // draw resize cubes\r\n    this._cropCanvas.drawIconResizeBoxNESW(this._calcResizeIconCenterCoords(), this._boxResizeBaseSize, this._boxResizeIsHover?this._boxResizeHoverRatio:this._boxResizeNormalRatio);\r\n  };\r\n\r\n  CropAreaCircle.prototype.processMouseMove=function(mouseCurX, mouseCurY) {\r\n    var cursor='default';\r\n    var res=false;\r\n\r\n    this._boxResizeIsHover = false;\r\n    this._areaIsHover = false;\r\n\r\n    if (this._areaIsDragging) {\r\n      this._x = mouseCurX - this._posDragStartX;\r\n      this._y = mouseCurY - this._posDragStartY;\r\n      this._areaIsHover = true;\r\n      cursor='move';\r\n      res=true;\r\n      this._events.trigger('area-move');\r\n    } else if (this._boxResizeIsDragging) {\r\n        cursor = 'nesw-resize';\r\n        var iFR, iFX, iFY;\r\n        iFX = mouseCurX - this._posResizeStartX;\r\n        iFY = this._posResizeStartY - mouseCurY;\r\n        if(iFX>iFY) {\r\n          iFR = this._posResizeStartSize + iFY*2;\r\n        } else {\r\n          iFR = this._posResizeStartSize + iFX*2;\r\n        }\r\n\r\n        this._size = Math.max(this._minSize, iFR);\r\n        this._boxResizeIsHover = true;\r\n        res=true;\r\n        this._events.trigger('area-resize');\r\n    } else if (this._isCoordWithinBoxResize([mouseCurX,mouseCurY])) {\r\n        cursor = 'nesw-resize';\r\n        this._areaIsHover = false;\r\n        this._boxResizeIsHover = true;\r\n        res=true;\r\n    } else if(this._isCoordWithinArea([mouseCurX,mouseCurY])) {\r\n        cursor = 'move';\r\n        this._areaIsHover = true;\r\n        res=true;\r\n    }\r\n\r\n    this._dontDragOutside();\r\n    angular.element(this._ctx.canvas).css({'cursor': cursor});\r\n\r\n    return res;\r\n  };\r\n\r\n  CropAreaCircle.prototype.processMouseDown=function(mouseDownX, mouseDownY) {\r\n    if (this._isCoordWithinBoxResize([mouseDownX,mouseDownY])) {\r\n      this._areaIsDragging = false;\r\n      this._areaIsHover = false;\r\n      this._boxResizeIsDragging = true;\r\n      this._boxResizeIsHover = true;\r\n      this._posResizeStartX=mouseDownX;\r\n      this._posResizeStartY=mouseDownY;\r\n      this._posResizeStartSize = this._size;\r\n      this._events.trigger('area-resize-start');\r\n    } else if (this._isCoordWithinArea([mouseDownX,mouseDownY])) {\r\n      this._areaIsDragging = true;\r\n      this._areaIsHover = true;\r\n      this._boxResizeIsDragging = false;\r\n      this._boxResizeIsHover = false;\r\n      this._posDragStartX = mouseDownX - this._x;\r\n      this._posDragStartY = mouseDownY - this._y;\r\n      this._events.trigger('area-move-start');\r\n    }\r\n  };\r\n\r\n  CropAreaCircle.prototype.processMouseUp=function(/*mouseUpX, mouseUpY*/) {\r\n    if(this._areaIsDragging) {\r\n      this._areaIsDragging = false;\r\n      this._events.trigger('area-move-end');\r\n    }\r\n    if(this._boxResizeIsDragging) {\r\n      this._boxResizeIsDragging = false;\r\n      this._events.trigger('area-resize-end');\r\n    }\r\n    this._areaIsHover = false;\r\n    this._boxResizeIsHover = false;\r\n\r\n    this._posDragStartX = 0;\r\n    this._posDragStartY = 0;\r\n  };\r\n\r\n\r\n  return CropAreaCircle;\r\n}]);\r\n\r\n\n\n'use strict';\r\n\r\ncrop.factory('cropAreaSquare', ['cropArea', function(CropArea) {\r\n  var CropAreaSquare = function() {\r\n    CropArea.apply(this, arguments);\r\n\r\n    this._resizeCtrlBaseRadius = 10;\r\n    this._resizeCtrlNormalRatio = 0.75;\r\n    this._resizeCtrlHoverRatio = 1;\r\n    this._iconMoveNormalRatio = 0.9;\r\n    this._iconMoveHoverRatio = 1.2;\r\n\r\n    this._resizeCtrlNormalRadius = this._resizeCtrlBaseRadius*this._resizeCtrlNormalRatio;\r\n    this._resizeCtrlHoverRadius = this._resizeCtrlBaseRadius*this._resizeCtrlHoverRatio;\r\n\r\n    this._posDragStartX=0;\r\n    this._posDragStartY=0;\r\n    this._posResizeStartX=0;\r\n    this._posResizeStartY=0;\r\n    this._posResizeStartSize=0;\r\n\r\n    this._resizeCtrlIsHover = -1;\r\n    this._areaIsHover = false;\r\n    this._resizeCtrlIsDragging = -1;\r\n    this._areaIsDragging = false;\r\n  };\r\n\r\n  CropAreaSquare.prototype = new CropArea();\r\n\r\n  CropAreaSquare.prototype._calcSquareCorners=function() {\r\n    var hSize=this._size/2;\r\n    return [\r\n      [this._x-hSize, this._y-hSize],\r\n      [this._x+hSize, this._y-hSize],\r\n      [this._x-hSize, this._y+hSize],\r\n      [this._x+hSize, this._y+hSize]\r\n    ];\r\n  };\r\n\r\n  CropAreaSquare.prototype._calcSquareDimensions=function() {\r\n    var hSize=this._size/2;\r\n    return {\r\n      left: this._x-hSize,\r\n      top: this._y-hSize,\r\n      right: this._x+hSize,\r\n      bottom: this._y+hSize\r\n    };\r\n  };\r\n\r\n  CropAreaSquare.prototype._isCoordWithinArea=function(coord) {\r\n    var squareDimensions=this._calcSquareDimensions();\r\n    return (coord[0]>=squareDimensions.left&&coord[0]<=squareDimensions.right&&coord[1]>=squareDimensions.top&&coord[1]<=squareDimensions.bottom);\r\n  };\r\n\r\n  CropAreaSquare.prototype._isCoordWithinResizeCtrl=function(coord) {\r\n    var resizeIconsCenterCoords=this._calcSquareCorners();\r\n    var res=-1;\r\n    for(var i=0,len=resizeIconsCenterCoords.length;i<len;i++) {\r\n      var resizeIconCenterCoords=resizeIconsCenterCoords[i];\r\n      if(coord[0] > resizeIconCenterCoords[0] - this._resizeCtrlHoverRadius && coord[0] < resizeIconCenterCoords[0] + this._resizeCtrlHoverRadius &&\r\n         coord[1] > resizeIconCenterCoords[1] - this._resizeCtrlHoverRadius && coord[1] < resizeIconCenterCoords[1] + this._resizeCtrlHoverRadius) {\r\n        res=i;\r\n        break;\r\n      }\r\n    }\r\n    return res;\r\n  };\r\n\r\n  CropAreaSquare.prototype._drawArea=function(ctx,centerCoords,size){\r\n    var hSize=size/2;\r\n    ctx.rect(centerCoords[0]-hSize,centerCoords[1]-hSize,size,size);\r\n  };\r\n\r\n  CropAreaSquare.prototype.draw=function() {\r\n    CropArea.prototype.draw.apply(this, arguments);\r\n\r\n    // draw move icon\r\n    this._cropCanvas.drawIconMove([this._x,this._y], this._areaIsHover?this._iconMoveHoverRatio:this._iconMoveNormalRatio);\r\n\r\n    // draw resize cubes\r\n    var resizeIconsCenterCoords=this._calcSquareCorners();\r\n    for(var i=0,len=resizeIconsCenterCoords.length;i<len;i++) {\r\n      var resizeIconCenterCoords=resizeIconsCenterCoords[i];\r\n      this._cropCanvas.drawIconResizeCircle(resizeIconCenterCoords, this._resizeCtrlBaseRadius, this._resizeCtrlIsHover===i?this._resizeCtrlHoverRatio:this._resizeCtrlNormalRatio);\r\n    }\r\n  };\r\n\r\n  CropAreaSquare.prototype.processMouseMove=function(mouseCurX, mouseCurY) {\r\n    var cursor='default';\r\n    var res=false;\r\n\r\n    this._resizeCtrlIsHover = -1;\r\n    this._areaIsHover = false;\r\n\r\n    if (this._areaIsDragging) {\r\n      this._x = mouseCurX - this._posDragStartX;\r\n      this._y = mouseCurY - this._posDragStartY;\r\n      this._areaIsHover = true;\r\n      cursor='move';\r\n      res=true;\r\n      this._events.trigger('area-move');\r\n    } else if (this._resizeCtrlIsDragging>-1) {\r\n      var xMulti, yMulti;\r\n      switch(this._resizeCtrlIsDragging) {\r\n        case 0: // Top Left\r\n          xMulti=-1;\r\n          yMulti=-1;\r\n          cursor = 'nwse-resize';\r\n          break;\r\n        case 1: // Top Right\r\n          xMulti=1;\r\n          yMulti=-1;\r\n          cursor = 'nesw-resize';\r\n          break;\r\n        case 2: // Bottom Left\r\n          xMulti=-1;\r\n          yMulti=1;\r\n          cursor = 'nesw-resize';\r\n          break;\r\n        case 3: // Bottom Right\r\n          xMulti=1;\r\n          yMulti=1;\r\n          cursor = 'nwse-resize';\r\n          break;\r\n      }\r\n      var iFX = (mouseCurX - this._posResizeStartX)*xMulti;\r\n      var iFY = (mouseCurY - this._posResizeStartY)*yMulti;\r\n      var iFR;\r\n      if(iFX>iFY) {\r\n        iFR = this._posResizeStartSize + iFY;\r\n      } else {\r\n        iFR = this._posResizeStartSize + iFX;\r\n      }\r\n      var wasSize=this._size;\r\n      this._size = Math.max(this._minSize, iFR);\r\n      var posModifier=(this._size-wasSize)/2;\r\n      this._x+=posModifier*xMulti;\r\n      this._y+=posModifier*yMulti;\r\n      this._resizeCtrlIsHover = this._resizeCtrlIsDragging;\r\n      res=true;\r\n      this._events.trigger('area-resize');\r\n    } else {\r\n      var hoveredResizeBox=this._isCoordWithinResizeCtrl([mouseCurX,mouseCurY]);\r\n      if (hoveredResizeBox>-1) {\r\n        switch(hoveredResizeBox) {\r\n          case 0:\r\n            cursor = 'nwse-resize';\r\n            break;\r\n          case 1:\r\n            cursor = 'nesw-resize';\r\n            break;\r\n          case 2:\r\n            cursor = 'nesw-resize';\r\n            break;\r\n          case 3:\r\n            cursor = 'nwse-resize';\r\n            break;\r\n        }\r\n        this._areaIsHover = false;\r\n        this._resizeCtrlIsHover = hoveredResizeBox;\r\n        res=true;\r\n      } else if(this._isCoordWithinArea([mouseCurX,mouseCurY])) {\r\n        cursor = 'move';\r\n        this._areaIsHover = true;\r\n        res=true;\r\n      }\r\n    }\r\n\r\n    this._dontDragOutside();\r\n    angular.element(this._ctx.canvas).css({'cursor': cursor});\r\n\r\n    return res;\r\n  };\r\n\r\n  CropAreaSquare.prototype.processMouseDown=function(mouseDownX, mouseDownY) {\r\n    var isWithinResizeCtrl=this._isCoordWithinResizeCtrl([mouseDownX,mouseDownY]);\r\n    if (isWithinResizeCtrl>-1) {\r\n      this._areaIsDragging = false;\r\n      this._areaIsHover = false;\r\n      this._resizeCtrlIsDragging = isWithinResizeCtrl;\r\n      this._resizeCtrlIsHover = isWithinResizeCtrl;\r\n      this._posResizeStartX=mouseDownX;\r\n      this._posResizeStartY=mouseDownY;\r\n      this._posResizeStartSize = this._size;\r\n      this._events.trigger('area-resize-start');\r\n    } else if (this._isCoordWithinArea([mouseDownX,mouseDownY])) {\r\n      this._areaIsDragging = true;\r\n      this._areaIsHover = true;\r\n      this._resizeCtrlIsDragging = -1;\r\n      this._resizeCtrlIsHover = -1;\r\n      this._posDragStartX = mouseDownX - this._x;\r\n      this._posDragStartY = mouseDownY - this._y;\r\n      this._events.trigger('area-move-start');\r\n    }\r\n  };\r\n\r\n  CropAreaSquare.prototype.processMouseUp=function(/*mouseUpX, mouseUpY*/) {\r\n    if(this._areaIsDragging) {\r\n      this._areaIsDragging = false;\r\n      this._events.trigger('area-move-end');\r\n    }\r\n    if(this._resizeCtrlIsDragging>-1) {\r\n      this._resizeCtrlIsDragging = -1;\r\n      this._events.trigger('area-resize-end');\r\n    }\r\n    this._areaIsHover = false;\r\n    this._resizeCtrlIsHover = -1;\r\n\r\n    this._posDragStartX = 0;\r\n    this._posDragStartY = 0;\r\n  };\r\n\r\n\r\n  return CropAreaSquare;\r\n}]);\n\n'use strict';\r\n\r\ncrop.factory('cropArea', ['cropCanvas', function(CropCanvas) {\r\n  var CropArea = function(ctx, events) {\r\n    this._ctx=ctx;\r\n    this._events=events;\r\n\r\n    this._minSize=80;\r\n\r\n    this._cropCanvas=new CropCanvas(ctx);\r\n\r\n    this._image=new Image();\r\n    this._x = 0;\r\n    this._y = 0;\r\n    this._size = 200;\r\n  };\r\n\r\n  /* GETTERS/SETTERS */\r\n\r\n  CropArea.prototype.getImage = function () {\r\n    return this._image;\r\n  };\r\n  CropArea.prototype.setImage = function (image) {\r\n    this._image = image;\r\n  };\r\n\r\n  CropArea.prototype.getX = function () {\r\n    return this._x;\r\n  };\r\n  CropArea.prototype.setX = function (x) {\r\n    this._x = x;\r\n    this._dontDragOutside();\r\n  };\r\n\r\n  CropArea.prototype.getY = function () {\r\n    return this._y;\r\n  };\r\n  CropArea.prototype.setY = function (y) {\r\n    this._y = y;\r\n    this._dontDragOutside();\r\n  };\r\n\r\n  CropArea.prototype.getSize = function () {\r\n    return this._size;\r\n  };\r\n  CropArea.prototype.setSize = function (size) {\r\n    this._size = Math.max(this._minSize, size);\r\n    this._dontDragOutside();\r\n  };\r\n\r\n  CropArea.prototype.getMinSize = function () {\r\n    return this._minSize;\r\n  };\r\n  CropArea.prototype.setMinSize = function (size) {\r\n    this._minSize = size;\r\n    this._size = Math.max(this._minSize, this._size);\r\n    this._dontDragOutside();\r\n  };\r\n\r\n  /* FUNCTIONS */\r\n  CropArea.prototype._dontDragOutside=function() {\r\n    var h=this._ctx.canvas.height,\r\n        w=this._ctx.canvas.width;\r\n    if(this._size>w) { this._size=w; }\r\n    if(this._size>h) { this._size=h; }\r\n    if(this._x<this._size/2) { this._x=this._size/2; }\r\n    if(this._x>w-this._size/2) { this._x=w-this._size/2; }\r\n    if(this._y<this._size/2) { this._y=this._size/2; }\r\n    if(this._y>h-this._size/2) { this._y=h-this._size/2; }\r\n  };\r\n\r\n  CropArea.prototype._drawArea=function() {};\r\n\r\n  CropArea.prototype.draw=function() {\r\n    // draw crop area\r\n    this._cropCanvas.drawCropArea(this._image,[this._x,this._y],this._size,this._drawArea);\r\n  };\r\n\r\n  CropArea.prototype.processMouseMove=function() {};\r\n\r\n  CropArea.prototype.processMouseDown=function() {};\r\n\r\n  CropArea.prototype.processMouseUp=function() {};\r\n\r\n  return CropArea;\r\n}]);\n\n'use strict';\r\n\r\ncrop.factory('cropCanvas', [function() {\r\n  // Shape = Array of [x,y]; [0, 0] - center\r\n  var shapeArrowNW=[[-0.5,-2],[-3,-4.5],[-0.5,-7],[-7,-7],[-7,-0.5],[-4.5,-3],[-2,-0.5]];\r\n  var shapeArrowNE=[[0.5,-2],[3,-4.5],[0.5,-7],[7,-7],[7,-0.5],[4.5,-3],[2,-0.5]];\r\n  var shapeArrowSW=[[-0.5,2],[-3,4.5],[-0.5,7],[-7,7],[-7,0.5],[-4.5,3],[-2,0.5]];\r\n  var shapeArrowSE=[[0.5,2],[3,4.5],[0.5,7],[7,7],[7,0.5],[4.5,3],[2,0.5]];\r\n  var shapeArrowN=[[-1.5,-2.5],[-1.5,-6],[-5,-6],[0,-11],[5,-6],[1.5,-6],[1.5,-2.5]];\r\n  var shapeArrowW=[[-2.5,-1.5],[-6,-1.5],[-6,-5],[-11,0],[-6,5],[-6,1.5],[-2.5,1.5]];\r\n  var shapeArrowS=[[-1.5,2.5],[-1.5,6],[-5,6],[0,11],[5,6],[1.5,6],[1.5,2.5]];\r\n  var shapeArrowE=[[2.5,-1.5],[6,-1.5],[6,-5],[11,0],[6,5],[6,1.5],[2.5,1.5]];\r\n\r\n  // Colors\r\n  var colors={\r\n    areaOutline: '#fff',\r\n    resizeBoxStroke: '#fff',\r\n    resizeBoxFill: '#444',\r\n    resizeBoxArrowFill: '#fff',\r\n    resizeCircleStroke: '#fff',\r\n    resizeCircleFill: '#444',\r\n    moveIconFill: '#fff'\r\n  };\r\n\r\n  return function(ctx){\r\n\r\n    /* Base functions */\r\n\r\n    // Calculate Point\r\n    var calcPoint=function(point,offset,scale) {\r\n        return [scale*point[0]+offset[0], scale*point[1]+offset[1]];\r\n    };\r\n\r\n    // Draw Filled Polygon\r\n    var drawFilledPolygon=function(shape,fillStyle,centerCoords,scale) {\r\n        ctx.save();\r\n        ctx.fillStyle = fillStyle;\r\n        ctx.beginPath();\r\n        var pc, pc0=calcPoint(shape[0],centerCoords,scale);\r\n        ctx.moveTo(pc0[0],pc0[1]);\r\n\r\n        for(var p in shape) {\r\n            if (p > 0) {\r\n                pc=calcPoint(shape[p],centerCoords,scale);\r\n                ctx.lineTo(pc[0],pc[1]);\r\n            }\r\n        }\r\n\r\n        ctx.lineTo(pc0[0],pc0[1]);\r\n        ctx.fill();\r\n        ctx.closePath();\r\n        ctx.restore();\r\n    };\r\n\r\n\r\n    /* Icons */\r\n\r\n    this.drawIconMove=function(centerCoords, scale) {\r\n      drawFilledPolygon(shapeArrowN, colors.moveIconFill, centerCoords, scale);\r\n      drawFilledPolygon(shapeArrowW, colors.moveIconFill, centerCoords, scale);\r\n      drawFilledPolygon(shapeArrowS, colors.moveIconFill, centerCoords, scale);\r\n      drawFilledPolygon(shapeArrowE, colors.moveIconFill, centerCoords, scale);\r\n    };\r\n\r\n    this.drawIconResizeCircle=function(centerCoords, circleRadius, scale) {\r\n      var scaledCircleRadius=circleRadius*scale;\r\n      ctx.save();\r\n      ctx.strokeStyle = colors.resizeCircleStroke;\r\n      ctx.lineWidth = 2;\r\n      ctx.fillStyle = colors.resizeCircleFill;\r\n      ctx.beginPath();\r\n      ctx.arc(centerCoords[0],centerCoords[1],scaledCircleRadius,0,2*Math.PI);\r\n      ctx.fill();\r\n      ctx.stroke();\r\n      ctx.closePath();\r\n      ctx.restore();\r\n    };\r\n\r\n    this.drawIconResizeBoxBase=function(centerCoords, boxSize, scale) {\r\n      var scaledBoxSize=boxSize*scale;\r\n      ctx.save();\r\n      ctx.strokeStyle = colors.resizeBoxStroke;\r\n      ctx.lineWidth = 2;\r\n      ctx.fillStyle = colors.resizeBoxFill;\r\n      ctx.fillRect(centerCoords[0] - scaledBoxSize/2, centerCoords[1] - scaledBoxSize/2, scaledBoxSize, scaledBoxSize);\r\n      ctx.strokeRect(centerCoords[0] - scaledBoxSize/2, centerCoords[1] - scaledBoxSize/2, scaledBoxSize, scaledBoxSize);\r\n      ctx.restore();\r\n    };\r\n    this.drawIconResizeBoxNESW=function(centerCoords, boxSize, scale) {\r\n      this.drawIconResizeBoxBase(centerCoords, boxSize, scale);\r\n      drawFilledPolygon(shapeArrowNE, colors.resizeBoxArrowFill, centerCoords, scale);\r\n      drawFilledPolygon(shapeArrowSW, colors.resizeBoxArrowFill, centerCoords, scale);\r\n    };\r\n    this.drawIconResizeBoxNWSE=function(centerCoords, boxSize, scale) {\r\n      this.drawIconResizeBoxBase(centerCoords, boxSize, scale);\r\n      drawFilledPolygon(shapeArrowNW, colors.resizeBoxArrowFill, centerCoords, scale);\r\n      drawFilledPolygon(shapeArrowSE, colors.resizeBoxArrowFill, centerCoords, scale);\r\n    };\r\n\r\n    /* Crop Area */\r\n\r\n    this.drawCropArea=function(image, centerCoords, size, fnDrawClipPath) {\r\n      var xRatio=image.width/ctx.canvas.width,\r\n          yRatio=image.height/ctx.canvas.height,\r\n          xLeft=centerCoords[0]-size/2,\r\n          yTop=centerCoords[1]-size/2;\r\n\r\n      ctx.save();\r\n      ctx.strokeStyle = colors.areaOutline;\r\n      ctx.lineWidth = 2;\r\n      ctx.beginPath();\r\n      fnDrawClipPath(ctx, centerCoords, size);\r\n      ctx.stroke();\r\n      ctx.clip();\r\n\r\n      // draw part of original image\r\n      if (size > 0) {\r\n          ctx.drawImage(image, xLeft*xRatio, yTop*yRatio, size*xRatio, size*yRatio, xLeft, yTop, size, size);\r\n      }\r\n\r\n      ctx.beginPath();\r\n      fnDrawClipPath(ctx, centerCoords, size);\r\n      ctx.stroke();\r\n      ctx.clip();\r\n\r\n      ctx.restore();\r\n    };\r\n\r\n  };\r\n}]);\n\n'use strict';\r\n\r\ncrop.factory('cropHost', ['$document', 'cropAreaCircle', 'cropAreaSquare', function($document, CropAreaCircle, CropAreaSquare) {\r\n  /* STATIC FUNCTIONS */\r\n\r\n  // Get Element's Offset\r\n  var getElementOffset=function(elem) {\r\n      var box = elem.getBoundingClientRect();\r\n\r\n      var body = document.body;\r\n      var docElem = document.documentElement;\r\n\r\n      var scrollTop = window.pageYOffset || docElem.scrollTop || body.scrollTop;\r\n      var scrollLeft = window.pageXOffset || docElem.scrollLeft || body.scrollLeft;\r\n\r\n      var clientTop = docElem.clientTop || body.clientTop || 0;\r\n      var clientLeft = docElem.clientLeft || body.clientLeft || 0;\r\n\r\n      var top  = box.top +  scrollTop - clientTop;\r\n      var left = box.left + scrollLeft - clientLeft;\r\n\r\n      return { top: Math.round(top), left: Math.round(left) };\r\n  };\r\n\r\n  return function(elCanvas, opts, events){\r\n    /* PRIVATE VARIABLES */\r\n\r\n    // Object Pointers\r\n    var ctx=null,\r\n        image=null,\r\n        theArea=null;\r\n\r\n    // Dimensions\r\n    var minCanvasDims=[100,100],\r\n        maxCanvasDims=[300,300];\r\n\r\n    // Result Image size\r\n    var resImgSize=200;\r\n\r\n    /* PRIVATE FUNCTIONS */\r\n\r\n    // Draw Scene\r\n    function drawScene() {\r\n      // clear canvas\r\n      ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n\r\n      if(image!==null) {\r\n        // draw source image\r\n        ctx.drawImage(image, 0, 0, ctx.canvas.width, ctx.canvas.height);\r\n\r\n        ctx.save();\r\n\r\n        // and make it darker\r\n        ctx.fillStyle = 'rgba(0, 0, 0, 0.65)';\r\n        ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\r\n\r\n        ctx.restore();\r\n\r\n        // draw Area\r\n        theArea.draw();\r\n      }\r\n    }\r\n\r\n    // Resets CropHost\r\n    var resetCropHost=function() {\r\n      if(image!==null) {\r\n        theArea.setImage(image);\r\n        var imageDims=[image.width, image.height],\r\n            imageRatio=image.width/image.height,\r\n            canvasDims=imageDims;\r\n\r\n        if(canvasDims[0]>maxCanvasDims[0]) {\r\n          canvasDims[0]=maxCanvasDims[0];\r\n          canvasDims[1]=canvasDims[0]/imageRatio;\r\n        } else if(canvasDims[0]<minCanvasDims[0]) {\r\n          canvasDims[0]=minCanvasDims[0];\r\n          canvasDims[1]=canvasDims[0]/imageRatio;\r\n        }\r\n        if(canvasDims[1]>maxCanvasDims[1]) {\r\n          canvasDims[1]=maxCanvasDims[1];\r\n          canvasDims[0]=canvasDims[1]*imageRatio;\r\n        } else if(canvasDims[1]<minCanvasDims[1]) {\r\n          canvasDims[1]=minCanvasDims[1];\r\n          canvasDims[0]=canvasDims[1]*imageRatio;\r\n        }\r\n        elCanvas.prop('width',canvasDims[0]).prop('height',canvasDims[1]).css({'margin-left': -canvasDims[0]/2+'px', 'margin-top': -canvasDims[1]/2+'px'});\r\n\r\n        theArea.setX(ctx.canvas.width/2);\r\n        theArea.setY(ctx.canvas.height/2);\r\n        theArea.setSize(Math.min(200, ctx.canvas.width/2, ctx.canvas.height/2));\r\n      } else {\r\n        elCanvas.prop('width',0).prop('height',0).css({'margin-top': 0});\r\n      }\r\n\r\n      drawScene();\r\n    };\r\n\r\n    var onMouseMove=function(e) {\r\n      if(image!==null) {\r\n        var offset=getElementOffset(ctx.canvas),\r\n            pageX, pageY;\r\n        if(e.type === 'touchmove') {\r\n          pageX=e.changedTouches[0].pageX;\r\n          pageY=e.changedTouches[0].pageY;\r\n        } else {\r\n          pageX=e.pageX;\r\n          pageY=e.pageY;\r\n        }\r\n        theArea.processMouseMove(pageX-offset.left, pageY-offset.top);\r\n        drawScene();\r\n      }\r\n    };\r\n\r\n    var onMouseDown=function(e) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      if(image!==null) {\r\n        var offset=getElementOffset(ctx.canvas),\r\n            pageX, pageY;\r\n        if(e.type === 'touchstart') {\r\n          pageX=e.changedTouches[0].pageX;\r\n          pageY=e.changedTouches[0].pageY;\r\n        } else {\r\n          pageX=e.pageX;\r\n          pageY=e.pageY;\r\n        }\r\n        theArea.processMouseDown(pageX-offset.left, pageY-offset.top);\r\n        drawScene();\r\n      }\r\n    };\r\n\r\n    var onMouseUp=function(e) {\r\n      if(image!==null) {\r\n        var offset=getElementOffset(ctx.canvas),\r\n            pageX, pageY;\r\n        if(e.type === 'touchend') {\r\n          pageX=e.changedTouches[0].pageX;\r\n          pageY=e.changedTouches[0].pageY;\r\n        } else {\r\n          pageX=e.pageX;\r\n          pageY=e.pageY;\r\n        }\r\n        theArea.processMouseUp(pageX-offset.left, pageY-offset.top);\r\n        drawScene();\r\n      }\r\n    };\r\n\r\n\r\n    this.getResultImageDataURI=function() {\r\n      var temp_ctx, temp_canvas;\r\n      temp_canvas = angular.element('<canvas></canvas>')[0];\r\n      temp_ctx = temp_canvas.getContext('2d');\r\n      temp_canvas.width = resImgSize;\r\n      temp_canvas.height = resImgSize;\r\n      if(image!==null){\r\n        temp_ctx.drawImage(image, (theArea.getX()-theArea.getSize()/2)*(image.width/ctx.canvas.width), (theArea.getY()-theArea.getSize()/2)*(image.height/ctx.canvas.height), theArea.getSize()*(image.width/ctx.canvas.width), theArea.getSize()*(image.height/ctx.canvas.height), 0, 0, resImgSize, resImgSize);\r\n      }\r\n      return temp_canvas.toDataURL();\r\n    };\r\n\r\n    this.setNewImageSource=function(imageSource) {\r\n      image=null;\r\n      resetCropHost();\r\n      events.trigger('image-updated');\r\n      if(!!imageSource) {\r\n        var newImage = new Image();\r\n        newImage.onload = function(){\r\n          events.trigger('load-done');\r\n          image=newImage;\r\n          resetCropHost();\r\n          events.trigger('image-updated');\r\n        };\r\n        newImage.onerror=function() {\r\n          events.trigger('load-error');\r\n        };\r\n        events.trigger('load-start');\r\n        newImage.src=imageSource;\r\n      }\r\n    };\r\n\r\n    this.setMaxDimensions=function(width, height) {\r\n      maxCanvasDims=[width,height];\r\n\r\n      if(image!==null) {\r\n        var curWidth=ctx.canvas.width,\r\n            curHeight=ctx.canvas.height;\r\n\r\n        var imageDims=[image.width, image.height],\r\n            imageRatio=image.width/image.height,\r\n            canvasDims=imageDims;\r\n\r\n        if(canvasDims[0]>maxCanvasDims[0]) {\r\n          canvasDims[0]=maxCanvasDims[0];\r\n          canvasDims[1]=canvasDims[0]/imageRatio;\r\n        } else if(canvasDims[0]<minCanvasDims[0]) {\r\n          canvasDims[0]=minCanvasDims[0];\r\n          canvasDims[1]=canvasDims[0]/imageRatio;\r\n        }\r\n        if(canvasDims[1]>maxCanvasDims[1]) {\r\n          canvasDims[1]=maxCanvasDims[1];\r\n          canvasDims[0]=canvasDims[1]*imageRatio;\r\n        } else if(canvasDims[1]<minCanvasDims[1]) {\r\n          canvasDims[1]=minCanvasDims[1];\r\n          canvasDims[0]=canvasDims[1]*imageRatio;\r\n        }\r\n        elCanvas.prop('width',canvasDims[0]).prop('height',canvasDims[1]).css({'margin-left': -canvasDims[0]/2+'px', 'margin-top': -canvasDims[1]/2+'px'});\r\n\r\n        var ratioNewCurWidth=ctx.canvas.width/curWidth,\r\n            ratioNewCurHeight=ctx.canvas.height/curHeight,\r\n            ratioMin=Math.min(ratioNewCurWidth, ratioNewCurHeight);\r\n\r\n        theArea.setX(theArea.getX()*ratioNewCurWidth);\r\n        theArea.setY(theArea.getY()*ratioNewCurHeight);\r\n        theArea.setSize(theArea.getSize()*ratioMin);\r\n      } else {\r\n        elCanvas.prop('width',0).prop('height',0).css({'margin-top': 0});\r\n      }\r\n\r\n      drawScene();\r\n\r\n    };\r\n\r\n    this.setAreaMinSize=function(size) {\r\n      size=parseInt(size,10);\r\n      if(!isNaN(size)) {\r\n        theArea.setMinSize(size);\r\n        drawScene();\r\n      }\r\n    };\r\n\r\n    this.setResultImageSize=function(size) {\r\n      size=parseInt(size,10);\r\n      if(!isNaN(size)) {\r\n        resImgSize=size;\r\n      }\r\n    };\r\n\r\n    this.setAreaType=function(type) {\r\n      var curSize=theArea.getSize(),\r\n          curMinSize=theArea.getMinSize(),\r\n          curX=theArea.getX(),\r\n          curY=theArea.getY();\r\n\r\n      var AreaClass=CropAreaCircle;\r\n      if(type==='square') {\r\n        AreaClass=CropAreaSquare;\r\n      }\r\n      theArea = new AreaClass(ctx, events);\r\n      theArea.setMinSize(curMinSize);\r\n      theArea.setSize(curSize);\r\n      theArea.setX(curX);\r\n      theArea.setY(curY);\r\n\r\n      // resetCropHost();\r\n      if(image!==null) {\r\n        theArea.setImage(image);\r\n      }\r\n\r\n      drawScene();\r\n    };\r\n\r\n    /* Life Cycle begins */\r\n\r\n    // Init Context var\r\n    ctx = elCanvas[0].getContext('2d');\r\n\r\n    // Init CropArea\r\n    theArea = new CropAreaCircle(ctx, events);\r\n\r\n    // Init Mouse Event Listeners\r\n    $document.on('mousemove',onMouseMove);\r\n    elCanvas.on('mousedown',onMouseDown);\r\n    $document.on('mouseup',onMouseUp);\r\n\r\n    // Init Touch Event Listeners\r\n    $document.on('touchmove',onMouseMove);\r\n    elCanvas.on('touchstart',onMouseDown);\r\n    $document.on('touchend',onMouseUp);\r\n\r\n    // CropHost Destructor\r\n    this.destroy=function() {\r\n      $document.off('mousemove',onMouseMove);\r\n      elCanvas.off('mousedown',onMouseDown);\r\n      $document.off('mouseup',onMouseMove);\r\n\r\n      $document.off('touchmove',onMouseMove);\r\n      elCanvas.off('touchstart',onMouseDown);\r\n      $document.off('touchend',onMouseMove);\r\n\r\n      elCanvas.remove();\r\n    };\r\n  };\r\n\r\n}]);\r\n\n\n'use strict';\r\n\r\ncrop.factory('cropPubSub', [function() {\r\n  return function() {\r\n    var events = {};\r\n    // Subscribe\r\n    this.on = function(names, handler) {\r\n      names.split(' ').forEach(function(name) {\r\n        if (!events[name]) {\r\n          events[name] = [];\r\n        }\r\n        events[name].push(handler);\r\n      });\r\n      return this;\r\n    };\r\n    // Publish\r\n    this.trigger = function(name, args) {\r\n      angular.forEach(events[name], function(handler) {\r\n        handler.call(null, args);\r\n      });\r\n      return this;\r\n    };\r\n  };\r\n}]);\n\ncrop.directive('imgCrop', ['$timeout', 'cropHost', 'cropPubSub', function($timeout, CropHost, CropPubSub) {\n  return {\n    restrict: 'E',\n    scope: {\n      image: '=',\n      resultImage: '=',\n\n      changeOnFly: '=',\n      areaType: '@',\n      areaMinSize: '=',\n      resultImageSize: '=',\n\n      onChange: '&',\n      onLoadBegin: '&',\n      onLoadDone: '&',\n      onLoadError: '&'\n    },\n    template: '<canvas></canvas>',\n    controller: function($scope/*, $attrs, $element*/) {\n      $scope.events = new CropPubSub();\n    },\n    link: function(scope, element/*, attrs*/) {\n      // Init Events Manager\n      var events = scope.events;\n\n      // Init Crop Host\n      var cropHost=new CropHost(element.find('canvas'), {}, events);\n\n      // Store Result Image to check if it's changed\n      var storedResultImage;\n\n      var updateResultImage=function(scope) {\n        var resultImage=cropHost.getResultImageDataURI();\n        if(storedResultImage!==resultImage) {\n          storedResultImage=resultImage;\n          if(angular.isDefined(scope.resultImage)) {\n            scope.resultImage=resultImage;\n          }\n          scope.onChange({$dataURI: scope.resultImage});\n        }\n      };\n\n      // Wrapper to safely exec functions within $apply on a running $digest cycle\n      var fnSafeApply=function(fn) {\n        return function(){\n          $timeout(function(){\n            scope.$apply(function(scope){\n              fn(scope);\n            });\n          });\n        };\n      };\n\n      // Setup CropHost Event Handlers\n      events\n        .on('load-start', fnSafeApply(function(scope){\n          scope.onLoadBegin({});\n        }))\n        .on('load-done', fnSafeApply(function(scope){\n          scope.onLoadDone({});\n        }))\n        .on('load-error', fnSafeApply(function(scope){\n          scope.onLoadError({});\n        }))\n        .on('area-move area-resize', fnSafeApply(function(scope){\n          if(!!scope.changeOnFly) {\n            updateResultImage(scope);\n          }\n        }))\n        .on('area-move-end area-resize-end image-updated', fnSafeApply(function(scope){\n          updateResultImage(scope);\n        }));\n\n      // Sync CropHost with Directive's options\n      scope.$watch('image',function(){\n        cropHost.setNewImageSource(scope.image);\n      });\n      scope.$watch('areaType',function(){\n        cropHost.setAreaType(scope.areaType);\n        updateResultImage(scope);\n      });\n      scope.$watch('areaMinSize',function(){\n        cropHost.setAreaMinSize(scope.areaMinSize);\n        updateResultImage(scope);\n      });\n      scope.$watch('resultImageSize',function(){\n        cropHost.setResultImageSize(scope.resultImageSize);\n        updateResultImage(scope);\n      });\n\n      // Update CropHost dimensions when the directive element is resized\n      scope.$watch(\n        function () {\n          return [element[0].clientWidth, element[0].clientHeight];\n        },\n        function (value) {\n          cropHost.setMaxDimensions(value[0],value[1]);\n          updateResultImage(scope);\n        },\n        true\n      );\n\n      // Destroy CropHost Instance when the directive is destroying\n      scope.$on('$destroy', function(){\n          cropHost.destroy();\n      });\n    }\n  };\n}]);\n}());"],"sourceRoot":"/source/"}